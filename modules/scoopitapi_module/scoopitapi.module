<?php
/**
 * @file
 * Scoop it API module.
 * @todo: permissions for administering module
 * @todo: implement a hook_requirements()
 * @todo: add block settings for multi-site support
 * @todo: switch to drupal_http_request and drupal_json_decode
 */

/**
 * Implements hook_variable_info().
 */
function scoopitapi_variable_info($options) {

  // This is the very minimum we need, some descriptive name.

  $variable['scoopitconsumer_key'] = array(
    'title' => t('Consumer Key'),
  );
  $variable['scoopitconsumersecret_key'] = array(
    'title' => t('Consumer Secret Key'),
  );
  $variable['scoopittopicnameone'] = array(
    'title' => t('First Topic Name'),
  );
  $variable['scoopittopicnametwo'] = array(
    'title' => t('Second Topic Name'),
  );

  return $variable;
}

function scoopitapi_menu() {
  return array(
    'admin/config/scoopit' => array(
        'page callback' => 'scoopitapi_admin_settings'
        , 'access arguments' => true
        , 'type' => MENU_CALLBACK
      )
  );
}


function scoopitapi_admin_settings() {
  $form = drupal_get_form('variable_module_form', 'scoopitapi');
  return $form;
}

/**
 * Implements hook_help().
 */
function scoopitapi_help($path, $arg) {
  switch ($path) {
    case "admin/help#scoopitapi":
      return '<p>' . t("Used to integrate with scoopit") . '</p>';

  }
}

function scoopitapi_init() {
  global $base_url;
  require_once drupal_get_path('module', 'scoopitapi') . '/lib/ScoopIt.php';
}


function scoopitapi_cron(){

  watchdog('scoopit', 'My cron running');

  $consumerKey = variable_get('scoopitconsumer_key');
  $consumerSecret = variable_get('scoopitconsumersecret_key');
  $topicOne = variable_get('scoopittopicnameone');
  $topicTwo = variable_get('scoopittopicnametwo');

  watchdog('scoopit', 'consumerKey: %action', array('%action' => $consumerKey));
  watchdog('scoopit', 'consumerSecret : %actionone ', array('%actionone' => $consumerSecret));
  watchdog('scoopit', 'Topic One  : %actionone ', array('%actionone' => $topicOne));
  watchdog('scoopit', 'Topic Two : %actionone', array('%actionone' => $topicTwo));
  
  // Construct scoop var, which handle API communication
  $scoop = new ScoopIt(new SessionTokenStore(), "", $consumerKey, $consumerSecret);
  if (!checkifPostsExists()){   // no Posts exists 
    insert_all_posts_from_topic($scoop,$topicOne);
    insert_all_posts_from_topic($scoop,$topicTwo);
  }else
  { 
      $postIds = getExistingPosts();
      insert_posts_from_topic($scoop,$topicOne,$postIds);
      insert_posts_from_topic($scoop,$topicTwo,$postIds);
  }

 // get_posts_from_topic($scoop,$topicOne);
 // get_posts_from_topic($scoop,$topicTwo);

}

function getExistingPosts(){
    $postIds = array();
   echo "In existing Code ";
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'scoopit_post')
      ->propertyCondition('status', 1);

    $result = $query->execute();

    if (!empty($result['node'])) {
      $nids = array_keys($result['node']);

     foreach ($nids as $nid) {
        $node = node_load($nid, NULL, TRUE);
        $fieldinfo = field_get_items('node', $node, 'field_post_id');
        if ($fieldinfo) {
          $post_id = check_plain($fieldinfo[0]['value']);
        }
        echo $post_id." : ";
        $postIds[] = $post_id;
      }

    }
    return $postIds;
}

function checkifPostsExists(){
    
     $query = new EntityFieldQuery();
     $query->entityCondition('entity_type', 'node')
       ->entityCondition('bundle', 'scoopit_post')
       ->propertyCondition('status', 1);
     $result = $query->execute();

     if (empty($result['node'])) {   
         echo "No Records exists";       
         return false;
     }    
     return true;
}

function insert_posts_from_topic($scoop, $topic_name,$postIds){

     echo "Getting the results from".$topic_name; 
     $topic = $scoop->resolveTopicFromItsShortName($topic_name);
     $posts = $topic->curatedPosts;
     foreach ($posts as $post) {
        echo $post->id." : ";
          if (!in_array($post->id, $postIds)) {
              echo "does not exists";
              create_a_scoopitpost_node($post,$topic_name);   
          }
          
    }
}

function insert_all_posts_from_topic($scoop, $topic_name){
     echo "Getting the results from".$topic_name; 
     $topic = $scoop->resolveTopicFromItsShortName($topic_name);
     $posts = $topic->curatedPosts;
     foreach ($posts as $post) {
        create_a_scoopitpost_node($post,$topic_name);     
    }
}

function create_a_scoopitpost_node($post,$topic_name) {
     
        echo "<li>".$post->title."<br>";
        echo $post->htmlContent;
        echo "<img src=".$post->mediumImageUrl." />";
        echo $post->topicId;
        echo $post->id;
        echo $post->url. " ".$post->curationDate."</li>";

        $host = @parse_url($post->url, PHP_URL_HOST);

    // If the URL can't be parsed, use the original URL
    // Change to "return false" if you don't want that
       if (!$host)
          $host = $post->url;

    // The "www." prefix isn't really needed if you're just using
    // this to display the domain to the user
    // if (substr($host, 0, 4) == "www.")
    //     $host = substr($host, 4);

    // You might also want to limit the length if screen space is limited
      if (strlen($host) > 50)
        $host = substr($host, 0, 47) . '...';

      // entity_create replaces the procedural steps in the first example of
      // creating a new object $node and setting its 'type' and uid property
      $values = array(
        'type' => 'scoopit_post',
        'uid' => 1,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);

      // The entity is now created, but we have not yet simplified use of it.
      // Now create an entity_metadata_wrapper around the new node entity
      // to make getting and setting values easier
      $ewrapper = entity_metadata_wrapper('node', $entity);

      // Using the wrapper, we do not have to worry about telling Drupal
      // what language we are using. The Entity API handles that for us.
      $ewrapper->title->set($post->title);

      // Setting the body is a bit different from other properties or fields
      // because the body can have both its complete value and its
      // summary
      $my_body_content = $post->htmlContent;
      $ewrapper->body->set(array('value' => $my_body_content,'format'=>'full_html'));
      

     // $ewrapper->body->summary->set('Things that interest me');

      $ewrapper->field_image_url->set($post->mediumImageUrl);
      $ewrapper->field_post_id->set($post->id);

      $ewrapper->field_post_external_url_->set($post->url);
      $ewrapper->field_topic_name->set($topic_name);
      $ewrapper->field_topic_id->set($post->topicId);
      $ewrapper->field_source->set($host);


      // Entity API cannot set date field values so the 'old' method must
      // be used
       $my_date = new DateTime();
       $my_date->setTimestamp(intval($post->curationDate)/1000);
      // $post->curationDate
       $entity->field_curation_date[LANGUAGE_NONE][0] = array(
          'value' => date_format($my_date, 'Y-m-d'),
          'timezone' => 'UTC',
          'timezone_db' => 'UTC',
        );

      // Now just save the wrapper and the entity
      // There is some suggestion that the 'true' argument is necessary to
      // the entity save method to circumvent a bug in Entity API. If there is
      // such a bug, it almost certainly will get fixed, so make sure to check.
      $ewrapper->save();
}

function get_posts_from_topic($scoop, $topic_name){

     echo "Getting the results from".$topic_name; 
     $topic = $scoop->resolveTopicFromItsShortName($topic_name);
     $posts = $topic->curatedPosts;
     foreach ($posts as $post) {
      echo "<li>".$post->title."<br>";
      echo $post->htmlContent;
      echo "<img src=".$post->mediumImageUrl." />";
      echo $post->topicId;
      echo $post->id;
      echo $post->url. " ".$post->curationDate."</li>";
    }
}







