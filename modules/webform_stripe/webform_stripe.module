<?php

/**
 * Default button texts.
 */
define('WEBFORM_STRIPE_CONTINUE_TEXT', t('Continue to payment >'));
define('WEBFORM_STRIPE_PAY_TEXT', t('Pay with Stripe'));
define('WEBFORM_STRIPE_CANCEL_TEXT', t('< Return to form'));

/**
 * Implements hook_permission().
 */
function webform_stripe_permission() {
  return array(
    'administer webform stripe' => array(
      'title' => t('Administer Webform Stripe settings'),
      'description' => t('Grants access to change global Stripe Checkout credentials and settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_stripe_menu() {
  $items['admin/config/services/webform-stripe'] = array(
    'title' => 'Webform Stripe',
    'description' => 'Configure Stripe API for Webform.',
    'access arguments' => array('administer webform stripe'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_stripe_settings_form'),
    'file' => 'webform_stripe.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_webform_component_info().
 */
function webform_stripe_webform_component_info() {
  $components['webform_stripe'] = array(
    'label' => t('Stripe payment'),
    'description' => t('Displays a payment button which opens the Stripe Checkout form.'),
    'features' => array(
      'analysis' => FALSE,
      'conditional' => FALSE,
      'default_value' => FALSE,
      'email' => FALSE,
      'description' => FALSE,
      'required' => FALSE,
      'private' => FALSE,
      'title_display' => FALSE,
      'css_classes' => FALSE,
    ),
    'file' => 'webform_stripe.webform.inc',
  );
  return $components;
}

/**
 * Implements hook_libraries_info().
 */
function webform_stripe_libraries_info() {
  return array(
    'stripe-php' => array(
      'name' => 'Stripe API Client Library for PHP',
      'vendor url' => 'https://stripe.com',
      'download url' => 'https://github.com/stripe/stripe-php',
      'dependencies' => array(),
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/(\d+\.\d+\.\d+)/',
      ),
      'files' => array(
        'php' => array(
          'init.php',
        ),
      ),
    ),
  );
}

/**
 * Returns TRUE if Stripe value is a charge.
 */
function webform_stripe_is_charge($value) {
  return substr($value, 0, 3) === 'ch_';
}

/**
 * Returns Stripe Checkout settings.
 */
function webform_stripe_checkout_settings() {
  // Merge variable settings with default settings.
  return variable_get('webform_stripe_checkout_settings', array()) + array(
    'name' => variable_get('site_name', 'Drupal'),
    'image' => '',
    'currency' => 'USD',
    'locale' => 'auto',
    'zip-code' => FALSE,
    'billing-address' => FALSE,
    'shipping-address' => FALSE,
    'allow-remember-me' => FALSE,
    'bitcoin' => FALSE,
    'alipay' => FALSE,
    'alipay-reusable' => FALSE,
  );
}

/**
 * Returns Stripe Checkout component settings, ready for Javascript.
 */
function webform_stripe_checkout_settings_js($component, $data) {
  // Load node.
  $node = node_load($component['nid']);

  // Merge variable settings, default settings, and component settings.
  $settings = $component['extra']['webform_stripe']
    + array('key' => variable_get('webform_stripe_publishable_key', ''))
    + webform_stripe_checkout_settings();

  // Process replacements and prepare for Javascript.
  foreach ($settings as $key => $setting) {
    // Prepare amount.
    if ($key === 'amount') {
      $value = $setting;

      // Get from component.
      if ($component['extra']['amount_type'] === 'component' && array_key_exists($component['extra']['amount_component'], $node->webform['components'])) {
        $amount_component = $node->webform['components'][$component['extra']['amount_component']];
        $value = isset($data[$amount_component['form_key']]) ? $data[$amount_component['form_key']] : (isset($data[$amount_component['cid']]) ? $data[$amount_component['cid']] : NULL);

        // For selects, grab the key and find the mapped amount.
        if ($value !== NULL && $amount_component['type'] === 'select') {
          $value = _webform_submit_select($amount_component, $value);
          if (!is_array($value) && array_key_exists($value, $component['extra']['amount_mapping'])) {
            $value = $component['extra']['amount_mapping'][$value];
          }
          else {
            $value = NULL;
          }
        }
      }

      // Optionally multiply the amount.
      if (!empty($component['extra']['amount_multiplier'])) {
        $value *= $component['extra']['amount_multiplier'];
      }

      // Only change this if not empty.
      if (!empty($value)) {
        $setting = $value;
      }
    }

    // Get description from component.
    if ($key === 'description' && $component['extra']['description_type'] === 'component' && array_key_exists($component['extra']['description_component'], $node->webform['components'])) {
      $description_component = $node->webform['components'][$component['extra']['description_component']];
      $value = isset($data[$description_component['form_key']]) ? $data[$description_component['form_key']] : (isset($data[$description_component['cid']]) ? $data[$description_component['cid']] : NULL);

      // For selects, grab the value and find the mapped description.
      if ($value !== NULL && $description_component['type'] === 'select') {
        $value = _webform_submit_select($description_component, $value);
        if (!is_array($value) && array_key_exists($value, $component['extra']['description_mapping'])) {
          $value = $component['extra']['description_mapping'][$value];
        }
        else {
          $value = NULL;
        }
      }

      // Only change this if not empty.
      if (!empty($value)) {
        $setting = $value;
      }
    }

    // If email is enabled, grab user's email address.
    if ($key === 'email' && $setting) {
      $setting = user_uid_optional_load()->mail;
    }

    // If image is specified, convert to URL.
    if ($key === 'image' && $setting) {
      $setting = url($setting);
    }

    // Convert boolean values into strings.
    if (in_array($key, array('billing-address', 'zip-code', 'shipping-address', 'allow-remember-me', 'bitcoin', 'alipay', 'alipay-reusable'))) {
      $setting = $setting ? 'true' : 'false';
    }

    // Skip if option is empty.
    if ($setting === '') {
      unset($settings[$key]);
      continue;
    }

    $settings[$key] = check_plain($setting);
  }

  return $settings;
}

/**
 * Implements hook_form_FORM_ID_alter() for "webform_component_edit_form".
 */
function webform_stripe_form_webform_component_edit_form_alter(&$form, &$form_state) {
  // Alter the Stripe payment component edit form, since Webform doesn't pass
  // the form state to _webform_edit_webform_stripe().
  if ($form['type']['#value'] === 'webform_stripe') {
    // Include in the form cache so it's available for ajax.
    form_load_include($form_state, 'inc', 'webform_stripe', 'webform_stripe.webform');

    $component = $form_state['build_info']['args'][1];

    foreach (array('amount', 'description') as $setting) {
      // Add ajax handler to component field.
      $form[$setting]["{$setting}_component"]['#ajax'] = array(
        'callback' => "webform_stripe_{$setting}_mapping_ajax_callback",
        'wrapper' => "webform-stripe-{$setting}-mapping",
      );

      // To get started, hide mapping fieldset by making it a container.
      $form[$setting]["{$setting}_mapping"]['#type'] = 'container';

      // Get the selected component. If it's a select field, add them to the
      // mapping container and display the fieldset, and default the mapping
      // values to the select option values.
      $cid = isset($form_state['values']['extra']["{$setting}_component"]) ? $form_state['values']['extra']["{$setting}_component"] : $component['extra']["{$setting}_component"];
      if (!empty($cid) && isset($form['#node']->webform['components'][$cid])) {
        $dynamic_component = $form['#node']->webform['components'][$cid];
        if ($dynamic_component['type'] === 'select') {
          $form[$setting]["{$setting}_mapping"]['#type'] = 'fieldset';
          $options = _webform_select_options($dynamic_component);
          foreach ($options as $key => $value) {
            $form[$setting]["{$setting}_mapping"][$key] = array(
              '#type' => 'textfield',
              '#field_suffix' => check_plain($value),
              '#size' => $setting === 'amount' ? 10 : 40,
              '#default_value' => isset($component['extra']["{$setting}_mapping"][$key]) ? $component['extra']["{$setting}_mapping"][$key] : ($setting === 'description' ? $value : ''),
            );
          }
        }
      }
    }
  }

  // When editing a Select component that's being used as the dynamic amount or
  // description component, show a reminder message.
  if ($form['type']['#value'] === 'select' && !empty($form_state['build_info']['args'][1]['cid'])) {
    foreach ($form['#node']->webform['components'] as $cid => $component) {
      if ($component['type'] === 'webform_stripe') {
        foreach (array('amount', 'description') as $setting) {
          if ($component['extra']["{$setting}_type"] === 'component' && $component['extra']["{$setting}_component"] === $form_state['build_info']['args'][1]['cid']) {
            drupal_set_message(t('The Stripe payment component is using this field to populate the %setting. If you add options to this field, be sure to also update the Stripe payment options.', array(
              '%setting' => $setting,
            )), 'warning');
          }
        }
      }
    }
  }
}

/**
 * Ajax callback which returns the amount mapping fieldset.
 */
function webform_stripe_amount_mapping_ajax_callback($form, $form_state) {
  return $form['amount']['amount_mapping'];
}

/**
 * Ajax callback which returns the description mapping fieldset.
 */
function webform_stripe_description_mapping_ajax_callback($form, $form_state) {
  return $form['description']['description_mapping'];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for "webform_client_form".
 */
function webform_stripe_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // Look for a Stripe payment component on a form that has a Submit button.
  foreach ($form['#node']->webform['components'] as $cid => $component) {
    if ($component['type'] === 'webform_stripe' && isset($form['actions']['submit'])) {
      // Store component for easy access in our submit callback.
      $form['#webform_stripe'] = $component;

      // New submission.
      if (empty($form['#submission'])) {
        // Wrap form with ID so we can replace it via ajax.
        $id = drupal_html_id('webform-stripe-form');
        $form['#prefix'] = '<div id="' . $id . '">';
        $form['#suffix'] = '</div>';

        // Hide Submit button and add our Continue button.
        $continue_text = !empty($component['extra']['continue_text']) ? $component['extra']['continue_text'] : WEBFORM_STRIPE_CONTINUE_TEXT;
        if (!isset($form_state['triggering_element']) || !($form_state['triggering_element']['#name'] === 'op' && $form_state['triggering_element']['#value'] === $continue_text)) {
          $form['actions']['submit']['#access'] = FALSE;
          $form['actions']['webform_stripe_continue'] = array(
            '#type' => 'button',
            '#value' => $continue_text,
            '#weight' => 15,
            '#ajax' => array(
              'callback' => 'webform_stripe_ajax_callback',
              'wrapper' => $id,
            ),
          );
        }

        // Continue button was clicked.
        else {
          // Hide webform fields and submit button in a way that keeps them in
          // the HTML so they can be submitted after successful payment.
          $form['submitted']['#type'] = 'container';
          $form['submitted']['#attributes']['style'] = 'display: none';
          $form['actions']['submit']['#attributes']['style'] = 'display: none';

          // If Previous button is available, hide it.
          if (isset($form['actions']['previous'])) {
            $form['actions']['previous']['#access'] = FALSE;
          }

          // Add our Pay button, which will trigger Stripe Checkout.
          $form['actions']['webform_stripe_pay'] = array(
            '#type' => 'button',
            '#value' => !empty($component['extra']['pay_text']) ? $component['extra']['pay_text'] : WEBFORM_STRIPE_PAY_TEXT,
            '#attributes' => array('class' => array('webform-stripe-pay')),
            '#attached' => array(
              'js' => array(
                array(
                  'data' => array('webform_stripe' => webform_stripe_checkout_settings_js($component, $form_state['values']['submitted'])),
                  'type' => 'setting',
                ),
              ),
            ),
          );

          // Add our Cancel button, which will return to editing the form.
          $form['actions']['webform_stripe_cancel'] = array(
            '#type' => 'button',
            '#value' => !empty($component['extra']['cancel_text']) ? $component['extra']['cancel_text'] : WEBFORM_STRIPE_CANCEL_TEXT,
            '#attributes' => array('class' => array('webform-stripe-cancel')),
            '#ajax' => array(
              'callback' => 'webform_stripe_ajax_callback',
              'wrapper' => $id,
            ),
          );
        }

        // Add submit callback.
        $form['#submit'][] = 'webform_stripe_process_charge';
      }

      // Editing submission not already having a payment.
      else if (empty($form['#submission']->data[$cid][0]) || !webform_stripe_is_charge($form['#submission']->data[$cid][0])) {
        // Add our Pay button, which will trigger Stripe Checkout.
        $form['actions']['webform_stripe_pay'] = array(
          '#type' => 'button',
          '#value' => !empty($component['extra']['pay_text']) ? $component['extra']['pay_text'] : WEBFORM_STRIPE_PAY_TEXT,
          '#attributes' => array('class' => array('webform-stripe-pay')),
          '#weight' => 15,
          '#attached' => array(
            'js' => array(
              array(
                'data' => array('webform_stripe' => webform_stripe_checkout_settings_js($component, $form['#submission']->data)),
                'type' => 'setting',
              ),
            ),
          ),
        );

        // Add submit callback.
        $form['#submit'][] = 'webform_stripe_process_charge';
      }

      // Only process one Stripe Payment component per form.
      break;
    }
  }
}

/**
 * Ajax callback which returns the form.
 */
function webform_stripe_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Webform client form submit callback which processes a Stripe charge.
 */
function webform_stripe_process_charge(&$form, &$form_state) {
  // Get Stripe token.
  $component = $form['#webform_stripe'];
  $value = $form_state['values']['submitted'][$component['cid']];
  $sid = $form_state['values']['details']['sid'];

  // Nothing to process if we don't have a token.
  if (substr($value, 0, 4) !== 'tok_') {
    return;
  }

  // Build JS settings, from which we'll get our amount and description.
  $settings = webform_stripe_checkout_settings_js($component, $form_state['values']['submitted']);

  // Parse Stripe token and email.
  list($token, $email) = explode(':', $value);

  // Include Stripe library.
  libraries_load('stripe-php');

  // Set secret key.
  \Stripe\Stripe::setApiKey(variable_get('webform_stripe_secret_key', ''));

  // Charge card.
  try {
    $checkout_settings = webform_stripe_checkout_settings();
    $charge = \Stripe\Charge::create(array(
      'source' => $token,
      'amount' => $settings['amount'],
      'description' => $settings['description'],
      'currency' => $checkout_settings['currency'],
      'receipt_email' => $email,
      'metadata' => array(
        'submission_url' => url("node/{$component['nid']}/submission/$sid", array('absolute' => TRUE)),
      ),
    ));

    // Store charge ID.
    $value = $charge->id;
  }

  // Charge failed.
  catch(\Stripe\Error\Base $e) {
    drupal_set_message(t('The payment was unsuccessful.'), 'error');

    // Log error message for admins.
    watchdog('webform_stripe', 'Payment was unsuccessful with message: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR, l(t('view'), "node/{$component['nid']}/webform"));
  }

  // Update submission data.
  db_query("UPDATE {webform_submitted_data} SET data = :value WHERE nid = :nid AND sid = :sid AND cid = :cid", array(
    ':value' => $value,
    ':nid' => $component['nid'],
    ':sid' => $sid,
    ':cid' => $component['cid'],
  ));
}

/**
 * Implements hook_form_FORM_ID_alter() for "webform_configure_form".
 */
function webform_stripe_form_webform_configure_form_alter(&$form, &$form_state) {
  // If form has Stripe payment component, disable the Submit button label
  // field and let the user know why.
  foreach ($form['#node']->webform['components'] as $component) {
    if ($component['type'] === 'webform_stripe') {
      $form['advanced']['submit_text']['#disabled'] = TRUE;
      $form['advanced']['submit_text']['#description'] = t('This form has a Stripe payment component, which changes the way the Submit button works, so this field has no effect and has been disabled.');
    }
  }
}
